Bitcoin SV version v1.0.2

Usage:
  bitcoind [options]                     Start Bitcoin SV Daemon

Options:

  -?
       Print this help message and exit

  -version
       Print version and exit

  -alertnotify=<cmd>
       Execute command when a relevant alert is received or we see a really
       long fork (%s in cmd is replaced by message)

  -blocknotify=<cmd>
       Execute command when the best block changes (%s in cmd is replaced by
       block hash)

  -assumevalid=<hex>
       If this block is in the chain assume that it and its ancestors are valid
       and potentially skip their script verification (0 to verify all,
       default:
       000000000000000000e45ad2fbcc5ff3e85f0868dd8f00ad4e92dffabe28f8d2,
       testnet:
       0000000000327972b8470c11755adf8f4319796bafae01f5a6650490b98a17db)

  -conf=<file>
       Specify configuration file (default: bitcoin.conf)

  -daemon
       Run in the background as a daemon and accept commands

  -datadir=<dir>
       Specify data directory

  -dbcache=<n>
       Set database cache size in megabytes (4 to 16384, default: 450)

  -genesisactivationheight
       Set block height at which genesis should be activated. (default:
       620538).

  -loadblock=<file>
       Imports blocks from external blk000??.dat file on startup

  -maxmempool=<n>
       Keep the transaction memory pool below <n> megabytes (default: 1000)

  -mempoolexpiry=<n>
       Do not keep transactions in the mempool longer than <n> hours (default:
       336)

  -maxmempoolnonfinal=<n>
       Keep the non-final transaction memory pool below <n> megabytes (default:
       50)

  -mempoolexpirynonfinal=<n>
       Do not keep transactions in the non-final mempool longer than <n> hours
       (default: 672)

  -persistmempool
       Whether to save the mempool on shutdown and load on restart (default: 1)

  -threadsperblock=<n>
       Set the number of script verification threads used when validating
       single block (0 to 64, 0 = auto, default: 0)

  -scriptvalidatormaxbatchsize=<n>
       Set size of script verification batch per thread (1 to 255, default:
       128)

  -maxparallelblocks=<n>
       Set the number of block that can be validated in parallel across all
       nodes. If additional block arrive, validation of an old block is
       terminated. (1 to 100, default: 4)

  -maxparallelblocksperpeer=<n>
       Set the number of blocks that can be validated in parallel from a single
       peer. If peers sends another block, the validation of it is
       delayed. (1 to maxparallelblocks, default: 3)

  -pid=<file>
       Specify pid file (default: bitcoind.pid)

  -preload=<n>
       If n is set to 1, blockchain state will be preloaded into memory. If n
       is 0, no preload will happen. Other values for n are not allowed.
       The default value is 0. This option is not supported on Windows
       operating systems.

  -prune=<n>
       Reduce storage requirements by enabling pruning (deleting) of old
       blocks. This allows the pruneblockchain RPC to be called to
       delete specific blocks, and enables automatic pruning of old
       blocks if a target size in MiB is provided. This mode is
       incompatible with -txindex and -rescan. Warning: Reverting this
       setting requires re-downloading the entire blockchain. (default:
       0 = disable pruning blocks, 1 = allow manual pruning via RPC,
       >550 = automatically prune block files to stay under the
       specified target size in MiB)

  -reindex-chainstate
       Rebuild chain state from the currently indexed blocks

  -reindex
       Rebuild chain state and block index from the blk*.dat files on disk

  -rejectmempoolrequest
       Reject every mempool request from non-whitelisted peers.

  -sysperms
       Create new files with system default permissions, instead of umask 077
       (only effective with disabled wallet functionality)

  -txindex
       Maintain a full transaction index, used by the getrawtransaction rpc
       call (default: 0)

Connection options:

  -addnode=<ip>
       Add a node to connect to and attempt to keep the connection open

  -banscore=<n>
       Threshold for disconnecting misbehaving peers (default: 100)

  -bantime=<n>
       Number of seconds to keep misbehaving peers from reconnecting (default:
       86400)

  -bind=<addr>
       Bind to given address and always listen on it. Use [host]:port notation
       for IPv6

  -connect=<ip>
       Connect only to the specified node(s); -noconnect or -connect=0 alone to
       disable automatic connections

  -discover
       Discover own IP addresses (default: 1 when listening and no -externalip
       or -proxy)

  -dns
       Allow DNS lookups for -addnode, -seednode and -connect (default: 1)

  -dnsseed
       Query for peer addresses via DNS lookup, if low on addresses (default: 1
       unless -connect/-noconnect)

  -externalip=<ip>
       Specify your own public address

  -forcednsseed
       Always query for peer addresses via DNS lookup (default: 1)

  -listen
       Accept connections from outside (default: 1 if no -proxy or
       -connect/-noconnect)

  -listenonion
       Automatically create Tor hidden service (default: 1)

  -maxconnections=<n>
       Maintain at most <n> connections to peers (default: 125)

  -maxreceivebuffer=<n>
       Maximum per-connection receive buffer, <n>*1000 bytes (default: 5000)

  -maxsendbuffer=<n>
       Maximum per-connection send buffer, <n>*1000 bytes (default: 1000)

  -factormaxsendqueuesbytes=<n>
       Factor that will be multiplied with excessiveBlockSize to limit the
       maximum bytes in all sending queues. If this size is exceeded, no
       response to block related P2P messages is sent. (default factor:
       4)

  -maxtimeadjustment
       Maximum allowed median peer time offset adjustment. Local perspective of
       time may be influenced by peers forward or backward by this
       amount. (default: 4200 seconds)

  -broadcastdelay=<n>
       Set inventory broadcast delay duration in millisecond(min: 0, max:
       50000)

  -onion=<ip:port>
       Use separate SOCKS5 proxy to reach peers via Tor hidden services
       (default: -proxy)

  -onlynet=<net>
       Only connect to nodes in network <net> (ipv4, ipv6 or onion)

  -permitbaremultisig
       Relay non-P2SH multisig (default: 1)

  -peerbloomfilters
       Support filtering of blocks and transaction with bloom filters (default:
       1)

  -port=<port>
       Listen for connections on <port> (default: 8333 or testnet: 18333)

  -proxy=<ip:port>
       Connect through SOCKS5 proxy

  -proxyrandomize
       Randomize credentials for every proxy connection. This enables Tor
       stream isolation (default: 1)

  -seednode=<ip>
       Connect to a node to retrieve peer addresses, and disconnect

  -timeout=<n>
       Specify connection timeout in milliseconds (minimum: 1, default: 5000)

  -torcontrol=<ip>:<port>
       Tor control port to use if onion listening enabled (default:
       127.0.0.1:9051)

  -torpassword=<pass>
       Tor control port password (default: empty)

  -upnp
       Use UPnP to map the listening port (default: 0)

  -whitebind=<addr>
       Bind to given address and whitelist peers connecting to it. Use
       [host]:port notation for IPv6

  -whitelist=<IP address or network>
       Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or
       CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple
       times. Whitelisted peers cannot be DoS banned and their
       transactions are always relayed, even if they are already in the
       mempool, useful e.g. for a gateway

  -whitelistrelay
       Accept relayed transactions received from whitelisted peers even when
       not relaying transactions (default: 1)

  -whitelistforcerelay
       Force relay of transactions from whitelisted peers even if they violate
       local relay policy (default: 1)

  -maxuploadtarget=<n>
       Tries to keep outbound traffic under the given target (in MiB per 24h),
       0 = no limit (default: 0)

Wallet options:

  -disablewallet
       Do not load the wallet and disable wallet RPC calls

  -keypool=<n>
       Set key pool size to <n> (default: 1000)

  -fallbackfee=<amt>
       A fee rate (in BSV/kB) that will be used when fee estimation has
       insufficient data (default: 0.0002)

  -mintxfee=<amt>
       Fees (in BSV/kB) smaller than this are considered zero fee for
       transaction creation (default: 0.00001)

  -paytxfee=<amt>
       Fee (in BSV/kB) to add to transactions you send (default: 0.00)

  -rescan
       Rescan the block chain for missing wallet transactions on startup

  -salvagewallet
       Attempt to recover private keys from a corrupt wallet on startup

  -spendzeroconfchange
       Spend unconfirmed change when sending transactions (default: 1)

  -txconfirmtarget=<n>
       If paytxfee is not set, include enough fee so transactions begin
       confirmation on average within n blocks (default: 6)

  -usehd
       Use hierarchical deterministic key generation (HD) after BIP32. Only has
       effect during wallet creation/first start (default: 1)

  -upgradewallet
       Upgrade wallet to latest format on startup

  -wallet=<file>
       Specify wallet file (within data directory) (default: wallet.dat)

  -walletbroadcast
       Make the wallet broadcast transactions (default: 1)

  -walletnotify=<cmd>
       Execute command when a wallet transaction changes (%s in cmd is replaced
       by TxID)

  -zapwallettxes=<mode>
       Delete all wallet transactions and only recover those parts of the
       blockchain through -rescan on startup (1 = keep tx meta data e.g.
       account owner and payment request information, 2 = drop tx meta
       data)

ZeroMQ notification options:

  -zmqpubhashblock=<address>
       Enable publish hash block in <address>

  -zmqpubhashtx=<address>
       Enable publish hash transaction in <address>

  -zmqpubrawblock=<address>
       Enable publish raw block in <address>

  -zmqpubrawtx=<address>
       Enable publish raw transaction in <address>

Debugging/Testing options:

  -uacomment=<cmt>
       Append comment to the user agent string

  -debug=<category>
       Output debugging information (default: 0, supplying <category> is
       optional). If <category> is not supplied or if <category> = 1,
       output all debugging information.<category> can be: net, tor,
       mempool, http, bench, zmq, db, rpc, estimatefee, addrman,
       selectcoins, reindex, cmpctblock, rand, prune, proxy, mempoolrej,
       libevent, coindb, leveldb, txnprop, txnsrc, journal, txnval.

  -debugexclude=<category>
       Exclude debugging information for a category. Can be used in conjunction
       with -debug=1 to output debug logs for all categories except one
       or more specified categories.

  -help-debug
       Show all debugging options (usage: --help -help-debug)

  -debugp2pthreadstalls
       Log P2P requests that stall request processing loop for longer than
       specified milliseconds (default: disabled)

  -logips
       Include IP addresses in debug output (default: 0)

  -logtimestamps
       Prepend debug output with timestamp (default: 1)

  -excessutxocharge=<amt>
       Fees (in BSV/kB) to charge per utxo created forrelaying, and mining
       (default: 0.00)

  -minrelaytxfee=<amt>
       Fees (in BSV/kB) smaller than this are considered zero fee for relaying,
       mining and transaction creation (default: 0.0000025)

  -maxtxfee=<amt>
       Maximum total fees (in BSV) to use in a single wallet transaction or raw
       transaction; setting this too low may abort large transactions
       (default: 0.10)

  -printtoconsole
       Send trace/debug info to console instead of bitcoind.log file

  -shrinkdebugfile
       Shrink bitcoind.log file on client startup (default: 1 when no -debug)

Chain selection options:

  -testnet
       Use the test chain

  -regtest
       Enter regression test mode, which uses a special chain in which blocks
       can be solved instantly. This is intended for regression testing
       tools and app development.

  -stn
       Use the Scaling Test Network

Node relay options:

  -excessiveblocksize=<n>
       Set the maximum block size in bytes we will accept from any source. This
       is the effective block size hard limit and it is a required
       parameter (0 = unlimited).

  -datacarrier
       Relay and mine data carrier transactions (default: 1)

  -datacarriersize
       Maximum size of data in data carrier transactions we relay and mine
       (default: 4294967295)

  -maxstackmemoryusageconsensus
       Set maximum stack memory usage in bytes used for script verification
       we're willing to to accept from any source (0 = unlimited) after
       Genesis is activated (consensus level). This is a required
       parameter.

  -maxstackmemoryusagepolicy
       Set maximum stack memory usage used for script verification we're
       willing to relay/mine in a single transaction (default: 100000000
       bytes, 0 = unlimited) after Genesis is activated (policy level).
       Must be less or equal to -maxstackmemoryusageconsensus.

  -maxopsperscriptpolicy=<n>
       Set maximum number of non-push operations we're willing to relay/mine
       per script (default: unlimited, 0 = unlimited), after Genesis is
       activated

  -maxtxsigopscountspolicy=<n>
       Set maximum allowed number of signature operations we're willing to
       relay/mine in a single transaction (default: unlimited, 0 =
       unlimited) after Genesis is activated.

  -maxstdtxvalidationduration=<n>
       Set the single standard transaction validation duration threshold in
       milliseconds after which the standard transaction validation will
       terminate with error and the transaction is not accepted to
       mempool (min 5ms, default: 5ms)

  -maxnonstdtxvalidationduration=<n>
       Set the single non-standard transaction validation duration threshold in
       milliseconds after which the non-standard transaction validation
       will terminate with error and the transaction is not accepted to
       mempool (min 10ms, default: 1000ms)

  -maxtxsizepolicy=<n>
       Set maximum transaction size in bytes we relay and mine (default:
       10000000, min: 99999, 0 = unlimited) after Genesis is activated

  -maxscriptsizepolicy
       Set maximum script size in bytes we're willing to relay/mine per script
       after Genesis is activated. (default: 10000, 0 = unlimited).

  -maxscriptnumlengthpolicy=<n>
       Set maximum allowed number length we're willing to relay/mine in scripts
       (default: 250000, 0 = unlimited) after Genesis is activated.

Block creation options:

  -blockmaxsize=<n>
       Set maximum block size in bytes we will mine. Size of the mined block
       will never exceed the maximum block size we will accept
       (-excessiveblocksize). If not specified, the following defaults
       are used: Mainnet: 32000000 before 2019-07-24 14:00:00 and
       128000000 after, Testnet: 32000000 before 2019-07-24 14:00:00 and
       128000000 after.

  -blockprioritypercentage=<n>
       Set maximum percentage of a block reserved to high-priority/low-fee
       transactions (default: 5)

  -blockmintxfee=<amt>
       Set lowest fee rate (in BSV/kB) for transactions to be included in block
       creation. (default: 0.000005)

  -invalidateblock=<hash>
       Permanently marks an existing block as invalid as if it violated a
       consensus rule (same as InvalidateBlock RPC function). If
       specified block header was not received yet, the header will be
       ignored when it is received from a peer. This option can be
       specified multiple times.

  -banclientua=<ua>
       Ban clients whose User Agent contains specified string (case
       insensitive). This option can be specified multiple times.

  -blockassembler=<type>
       Set the type of block assembler to use for mining. Supported options are
       LEGACY or JOURNALING. (default: LEGACY)

RPC server options:

  -server
       Accept command line and JSON-RPC commands

  -rest
       Accept public REST requests (default: 0)

  -rpcbind=<addr>
       Bind to given address to listen for JSON-RPC connections. Use
       [host]:port notation for IPv6. This option can be specified
       multiple times (default: bind to all interfaces)

  -rpccookiefile=<loc>
       Location of the auth cookie (default: data dir)

  -rpcuser=<user>
       Username for JSON-RPC connections

  -rpcpassword=<pw>
       Password for JSON-RPC connections

  -rpcauth=<userpw>
       Username and hashed password for JSON-RPC connections. The field
       <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A
       canonical python script is included in share/rpcuser. The client
       then connects normally using the
       rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This
       option can be specified multiple times

  -rpcport=<port>
       Listen for JSON-RPC connections on <port> (default: 8332 or testnet:
       18332)

  -rpcallowip=<ip>
       Allow JSON-RPC connections from specified source. Valid for <ip> are a
       single IP (e.g. 1.2.3.4), a network/netmask (e.g.
       1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This
       option can be specified multiple times

  -magicbytes=<hexcode>
       Allow users to split the test net by changing the magicbytes. This
       option only work on a network different than mainnet. default :
       0f0f0f0f

  -rpcthreads=<n>
       Set the number of threads to service RPC calls (default: 4)

  -rpccorsdomain=value
       Domain from which to accept cross origin requests (browser enforced)

  -invalidcsinterval=<n>
       Set the time limit on the reception of invalid message checksums from a
       single node in milliseconds (default: 500ms)

  -invalidcsfreq=<n>
       Set the limit on the number of invalid checksums received over a given
       time period from a single node  (default: 100)

  -invalidheaderinterval=<n>
       Set the time limit on the transmission of message headers from the local
       node in milliseconds (default: 500ms)

  -invalidheaderfreq=<n>
       Set the limit on the number of message headers transmitted from the
       local node over a given time period (default: 2000)

Orphan txns config :

  -blockreconstructionextratxn=<n>
       Extra transactions to keep in memory for compact block reconstructions
       (default: 100)

  -maxorphantxsize=<n>
       Keep at most <n> MB of unconnectable transactions in memory (default:
       100 MB)

  -maxcollectedoutpoints=<n>
       Keep at most <n> collected outpoints in memory (default: 300000)

TxnValidator options:

  -numstdtxvalidationthreads=<n>
       Set the number of 'High' priority threads used to validate standard txns
       (dynamically calculated default: 1)

  -numnonstdtxvalidationthreads=<n>
       Set the number of 'Low' priority threads used to validate non-standard
       txns (dynamically calculated default: 1)

  -maxstdtxnsperthreadratio=<n>
       Set the max ratio for a number of standard txns per 'High' priority
       thread (default: 1000)

  -maxnonstdtxnsperthreadratio=<n>
       Set the max ratio for a number of non-standard txns per 'Low' priority
       thread (default: 1000)

  -txnvalidationasynchrunfreq=<n>
       Set run frequency in asynchronous mode (default: 100ms)

  -maxtxnvalidatorasynctasksrunduration=<n>
       Set the maximum validation duration for async tasks in a single run
       (default: 10000ms)

  -maxcoinsviewcachesize=<n>
       Set the maximum cumulative size of accepted transaction inputs inside
       coins cache (default: unlimited -> 0)

  -txnvalidationqueuesmaxmemory=<n>
       Set the maximum memory usage for the transaction queues in MB (default:
       2048)

  -maxpubkeyspermultisigpolicy=<n>
       Set maximum allowed number of public keys we're willing to relay/mine in
       a single CHECK_MULTISIG(VERIFY) operation (default: unlimited, 0
       = unlimited), after Genesis is activated

  -maxgenesisgracefulperiod=<n>
       Set maximum allowed number of blocks for Genesis graceful period
       (default: 72) where nodes will not be banned for violating
       Genesis rules in case the calling node is not yet on Genesis
       height and vice versa. Seting 0 will disable Genesis graceful
       period. Genesis graceful period range :(GENESIS_ACTIVATION_HEIGHT
       - n |...| GENESIS_ACTIVATION_HEIGHT |...|
       GENESIS_ACTIVATION_HEIGHT + n)

